'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _Heading = require('../../components/Heading');

var _Heading2 = _interopRequireDefault(_Heading);

var _campaign = require('../../ethereum/campaign');

var _campaign2 = _interopRequireDefault(_campaign);

var _web = require('../../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _ContributeForm = require('../../components/ContributeForm');

var _ContributeForm2 = _interopRequireDefault(_ContributeForm);

var _routes = require('../../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'C:\\Users\\User\\Desktop\\kickstart\\pages\\campaigns\\show.js?entry';


var CampaignShow = function (_Component) {
    (0, _inherits3.default)(CampaignShow, _Component);

    function CampaignShow() {
        (0, _classCallCheck3.default)(this, CampaignShow);

        return (0, _possibleConstructorReturn3.default)(this, (CampaignShow.__proto__ || (0, _getPrototypeOf2.default)(CampaignShow)).apply(this, arguments));
    }

    (0, _createClass3.default)(CampaignShow, [{
        key: 'renderCards',
        value: function renderCards() {
            var _props = this.props,
                minimumContribution = _props.minimumContribution,
                contractBalance = _props.contractBalance,
                numberOfRequests = _props.numberOfRequests,
                numberOfApprovers = _props.numberOfApprovers,
                manager = _props.manager;

            var items = [{
                header: manager,
                meta: 'Address of the manager',
                description: 'The manager created this campaign and can create requests to withdraw money',
                style: { overflowWrap: 'break-word' }
            }, {
                header: parseInt(minimumContribution, 16).toString(10),
                meta: 'Minimum contribution (wei)',
                description: 'You must contribute at least this much amount of wei to become an approver',
                style: { overflowWrap: 'break-word' }
            }, {
                header: parseInt(numberOfRequests, 16).toString(10),
                meta: 'Number of requests',
                description: 'A request tries to withdraw money from the contract, Requests must be approved by approvers',
                style: { overflowWrap: 'break-word' }
            }, {
                header: parseInt(numberOfApprovers, 16).toString(10),
                meta: 'Number of approvers',
                description: 'Number of people who have already donated to this campaign',
                style: { overflowWrap: 'break-word' }
            }, {
                header: _web2.default.utils.fromWei(contractBalance, 'ether'),
                meta: 'Campaign\'s balance (ether)',
                description: 'The balance is how much money the campaign has left',
                style: { overflowWrap: 'break-word' }
            }];
            return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 66
                }
            });
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(_Heading2.default, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 71
                }
            }, _react2.default.createElement('div', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 72
                }
            }, _react2.default.createElement('h3', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 73
                }
            }, 'Campaign show'), _react2.default.createElement(_semanticUiReact.Grid, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 74
                }
            }, _react2.default.createElement(_semanticUiReact.Grid.Row, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 75
                }
            }, _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 10, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 76
                }
            }, this.renderCards()), _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 6, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 80
                }
            }, _react2.default.createElement(_ContributeForm2.default, { address: this.props.address, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 81
                }
            }))), _react2.default.createElement(_semanticUiReact.Grid.Row, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 84
                }
            }, _react2.default.createElement(_semanticUiReact.Grid.Column, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 85
                }
            }, _react2.default.createElement(_routes.Link, { route: '/campaigns/' + this.props.address + '/requests', __source: {
                    fileName: _jsxFileName,
                    lineNumber: 86
                }
            }, _react2.default.createElement('a', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 87
                }
            }, _react2.default.createElement(_semanticUiReact.Button, { primary: true, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 88
                }
            }, 'View requests'))))))));
        }
    }], [{
        key: 'getInitialProps',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(props) {
                var campaign, summary;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                campaign = (0, _campaign2.default)(props.query.address);
                                _context.next = 3;
                                return campaign.methods.getSummary().call();

                            case 3:
                                summary = _context.sent;
                                return _context.abrupt('return', {
                                    address: props.query.address,
                                    minimumContribution: summary[0]._hex,
                                    contractBalance: summary[1]._hex,
                                    numberOfRequests: summary[2]._hex,
                                    numberOfApprovers: summary[3]._hex,
                                    manager: summary[4]
                                });

                            case 5:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function getInitialProps(_x) {
                return _ref.apply(this, arguments);
            }

            return getInitialProps;
        }()
    }]);

    return CampaignShow;
}(_react.Component);

exports.default = CampaignShow;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQ2FtcGFpZ25TaG93IiwiX0NvbXBvbmVudCIsIl9fcHJvdG9fXyIsImFwcGx5IiwiYXJndW1lbnRzIiwia2V5IiwidmFsdWUiLCJyZW5kZXJDYXJkcyIsIl9wcm9wcyIsInByb3BzIiwibWluaW11bUNvbnRyaWJ1dGlvbiIsImNvbnRyYWN0QmFsYW5jZSIsIm51bWJlck9mUmVxdWVzdHMiLCJudW1iZXJPZkFwcHJvdmVycyIsIm1hbmFnZXIiLCJpdGVtcyIsImhlYWRlciIsIm1ldGEiLCJkZXNjcmlwdGlvbiIsInN0eWxlIiwib3ZlcmZsb3dXcmFwIiwicGFyc2VJbnQiLCJ0b1N0cmluZyIsInV0aWxzIiwiZnJvbVdlaSIsImNyZWF0ZUVsZW1lbnQiLCJHcm91cCIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwicmVuZGVyIiwiUm93IiwiQ29sdW1uIiwid2lkdGgiLCJhZGRyZXNzIiwicm91dGUiLCJwcmltYXJ5IiwiX3JlZiIsIm1hcmsiLCJfY2FsbGVlIiwiY2FtcGFpZ24iLCJzdW1tYXJ5Iiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsInF1ZXJ5IiwibWV0aG9kcyIsImdldFN1bW1hcnkiLCJjYWxsIiwic2VudCIsImFicnVwdCIsIl9oZXgiLCJzdG9wIiwiZ2V0SW5pdGlhbFByb3BzIiwiX3giXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBUEEsSUFBSUEsZUFBZSxzRUFBbkI7OztBQVNBLElBQUlDLGVBQWUsVUFBVUMsVUFBVixFQUFzQjtBQUNyQyw0QkFBVUQsWUFBVixFQUF3QkMsVUFBeEI7O0FBRUEsYUFBU0QsWUFBVCxHQUF3QjtBQUNwQixz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