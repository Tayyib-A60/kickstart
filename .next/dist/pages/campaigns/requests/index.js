'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Heading = require('../../../components/Heading');

var _Heading2 = _interopRequireDefault(_Heading);

var _semanticUiReact = require('semantic-ui-react');

var _routes = require('../../../routes');

var _campaign = require('../../../ethereum/campaign');

var _campaign2 = _interopRequireDefault(_campaign);

var _RequestRow = require('../../../components/RequestRow');

var _RequestRow2 = _interopRequireDefault(_RequestRow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'C:\\Users\\User\\Downloads\\kickstart\\pages\\campaigns\\requests\\index.js?entry';


var RequestIndex = function (_Component) {
    (0, _inherits3.default)(RequestIndex, _Component);

    function RequestIndex() {
        (0, _classCallCheck3.default)(this, RequestIndex);

        return (0, _possibleConstructorReturn3.default)(this, (RequestIndex.__proto__ || (0, _getPrototypeOf2.default)(RequestIndex)).apply(this, arguments));
    }

    (0, _createClass3.default)(RequestIndex, [{
        key: 'renderRows',
        value: function renderRows() {
            var _this2 = this;

            return this.props.requests.map(function (request, index) {
                return _react2.default.createElement(_RequestRow2.default, {
                    key: index,
                    id: index,
                    request: request,
                    address: _this2.props.address,
                    approversCount: _this2.props.approversCount,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 26
                    }
                });
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var Header = _semanticUiReact.Table.Header,
                Row = _semanticUiReact.Table.Row,
                HeaderCell = _semanticUiReact.Table.HeaderCell,
                Body = _semanticUiReact.Table.Body;

            return _react2.default.createElement(_Heading2.default, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 39
                }
            }, _react2.default.createElement('h3', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 40
                }
            }, 'Request List'), _react2.default.createElement(_routes.Link, { route: '/campaigns/' + this.props.address + '/requests/new', __source: {
                    fileName: _jsxFileName,
                    lineNumber: 43
                }
            }, _react2.default.createElement('a', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 44
                }
            }, _react2.default.createElement(_semanticUiReact.Button, { primary: true, floated: 'right', style: { marginBottom: 30 }, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 45
                }
            }, 'Add Request'))), _react2.default.createElement(_semanticUiReact.Table, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 48
                }
            }, _react2.default.createElement(Header, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 49
                }
            }, _react2.default.createElement(Row, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 50
                }
            }, _react2.default.createElement(HeaderCell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 51
                }
            }, 'Id'), _react2.default.createElement(HeaderCell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 52
                }
            }, 'Description'), _react2.default.createElement(HeaderCell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 53
                }
            }, 'Amount'), _react2.default.createElement(HeaderCell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 54
                }
            }, 'Recipient'), _react2.default.createElement(HeaderCell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 55
                }
            }, 'Approval Count'), _react2.default.createElement(HeaderCell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 56
                }
            }, 'Approve'), _react2.default.createElement(HeaderCell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 57
                }
            }, 'Finialize'))), _react2.default.createElement(Body, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 60
                }
            }, this.renderRows())), _react2.default.createElement('div', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 64
                }
            }, 'Found ', parseInt(this.props.requestCount._hex, 16).toString(10), ' requests'));
        }
    }], [{
        key: 'getInitialProps',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(props) {
                var address, campaign, requestCount, approversCount, requests;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                address = props.query.address;
                                campaign = (0, _campaign2.default)(address);
                                _context.next = 4;
                                return campaign.methods.getRequestCount().call();

                            case 4:
                                requestCount = _context.sent;
                                _context.next = 7;
                                return campaign.methods.approversCount().call();

                            case 7:
                                approversCount = _context.sent;
                                _context.next = 10;
                                return _promise2.default.all(Array(parseInt(requestCount)).fill().map(function (element, index) {
                                    return campaign.methods.requests(index).call();
                                }));

                            case 10:
                                requests = _context.sent;
                                return _context.abrupt('return', { address: address, requests: requests, requestCount: requestCount, approversCount: approversCount });

                            case 12:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function getInitialProps(_x) {
                return _ref.apply(this, arguments);
            }

            return getInitialProps;
        }()
    }]);

    return RequestIndex;
}(_react.Component);

exports.default = RequestIndex;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiUmVxdWVzdEluZGV4IiwiX0NvbXBvbmVudCIsIl9fcHJvdG9fXyIsImFwcGx5IiwiYXJndW1lbnRzIiwia2V5IiwidmFsdWUiLCJyZW5kZXJSb3dzIiwiX3RoaXMyIiwicHJvcHMiLCJyZXF1ZXN0cyIsIm1hcCIsInJlcXVlc3QiLCJpbmRleCIsImNyZWF0ZUVsZW1lbnQiLCJpZCIsImFkZHJlc3MiLCJhcHByb3ZlcnNDb3VudCIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwicmVuZGVyIiwiSGVhZGVyIiwiUm93IiwiSGVhZGVyQ2VsbCIsIkJvZHkiLCJyb3V0ZSIsInByaW1hcnkiLCJmbG9hdGVkIiwic3R5bGUiLCJtYXJnaW5Cb3R0b20iLCJwYXJzZUludCIsInJlcXVlc3RDb3VudCIsIl9oZXgiLCJ0b1N0cmluZyIsIl9yZWYiLCJtYXJrIiwiX2NhbGxlZSIsImNhbXBhaWduIiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsInF1ZXJ5IiwibWV0aG9kcyIsImdldFJlcXVlc3RDb3VudCIsImNhbGwiLCJzZW50IiwiYWxsIiwiQXJyYXkiLCJmaWxsIiwiZWxlbWVudCIsImFicnVwdCIsInN0b3AiLCJnZXRJbml0aWFsUHJvcHMiLCJfeCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUNBOzs7Ozs7QUFOQSxJQUFJQSxlQUFlLG1GQUFuQjs7O0FBUUEsSUFBSUMsZUFBZSxVQUFVQyxVQUFWLEVBQXNCO0FBQ3JDLDRCQUFVRCxZQUFWLEVBQXdCQyxVQUF4Qjs7QUFFQSxhQUFTRCxZQUFULEdBQXdCO0FBQ3BCLHNDQUFnQixJQUFoQixFQUFzQkEsWUFBdEI7O0FBRUEsZUFBTyx5Q0FBMkIsSUFBM0IsRUFBaUMsQ0FBQ0EsYUFBYUUsU0FBYixJQUEwQiw4QkFBdUJGLFlBQXZCLENBQTNCLEVBQWlFRyxLQUFqRSxDQUF1RSxJQUF2RSxFQUE2RUMsU0FBN0UsQ0FBakMsQ0FBUDtBQUNIOztBQUVELCtCQUFhSixZQUFiLEVBQTJCLENBQUM7QUFDeEJLLGFBQUssWUFEbUI7QUFFeEJDLGVBQU8sU0FBU0MsVUFBVCxHQUFzQjtBQUN6QixnQkFBSUMsU0FBUyxJQUFiOztBQUVBLG1CQUFPLEtBQUtDLEtBQUwsQ0FBV0MsUUFBWCxDQUFvQkMsR0FBcEIsQ0FBd0IsVUFBVUMsT0FBVixFQUFtQkMsS0FBbkIsRUFBMEI7QUFDckQsdUJBQU8sZ0JBQU1DLGFBQU4sdUJBQWdDO0FBQ25DVCx5QkFBS1EsS0FEOEI7QUFFbkNFLHdCQUFJRixLQUYrQjtBQUduQ0QsNkJBQVNBLE9BSDBCO0FBSW5DSSw2QkFBU1IsT0FBT0MsS0FBUCxDQUFhTyxPQUphO0FBS25DQyxvQ0FBZ0JULE9BQU9DLEtBQVAsQ0FBYVEsY0FMTTtBQU1uQ0MsOEJBQVU7QUFDTkMsa0NBQVVwQixZQURKO0FBRU5xQixvQ0FBWTtBQUZOO0FBTnlCLGlCQUFoQyxDQUFQO0FBV0gsYUFaTSxDQUFQO0FBYUg7QUFsQnVCLEtBQUQsRUFtQnhCO0FBQ0NmLGFBQUssUUFETjtBQUVDQyxlQUFPLFNBQVNlLE1BQVQsR0FBa0I7QUFDckIsZ0JBQUlDLFNBQVMsdUJBQU1BLE1BQW5CO0FBQUEsZ0JBQ0lDLE1BQU0sdUJBQU1BLEdBRGhCO0FBQUEsZ0JBRUlDLGFBQWEsdUJBQU1BLFVBRnZCO0FBQUEsZ0JBR0lDLE9BQU8sdUJBQU1BLElBSGpCOztBQUtBLG1CQUFPLGdCQUFNWCxhQUFOLG9CQUVIO0FBQ0lJLDBCQUFVO0FBQ05DLDhCQUFVcEIsWUFESjtBQUVOcUIsZ0NBQVk7QUFGTjtBQURkLGFBRkcsRUFRSCxnQkFBTU4sYUFBTixDQUNJLElBREosRUFFSTtBQUNJSSwwQkFBVTtBQUNOQyw4QkFBVXBCLFlBREo7QUFFTnFCLGdDQUFZO0FBRk47QUFEZCxhQUZKLEVBUUksY0FSSixDQVJHLEVBa0JILGdCQUFNTixhQUFOLGVBRUksRUFBRVksT0FBTyxnQkFBZ0IsS0FBS2pCLEtBQUwsQ0FBV08sT0FBM0IsR0FBcUMsZUFBOUMsRUFBK0RFLFVBQVU7QUFDakVDLDhCQUFVcEIsWUFEdUQ7QUFFakVxQixnQ0FBWTtBQUZxRDtBQUF6RSxhQUZKLEVBT0ksZ0JBQU1OLGFBQU4sQ0FDSSxHQURKLEVBRUk7QUFDSUksMEJBQVU7QUFDTkMsOEJBQVVwQixZQURKO0FBRU5xQixnQ0FBWTtBQUZOO0FBRGQsYUFGSixFQVFJLGdCQUFNTixhQUFOLDBCQUVJLEVBQUVhLFNBQVMsSUFBWCxFQUFpQkMsU0FBUyxPQUExQixFQUFtQ0MsT0FBTyxFQUFFQyxjQUFjLEVBQWhCLEVBQTFDLEVBQWdFWixVQUFVO0FBQ2xFQyw4QkFBVXBCLFlBRHdEO0FBRWxFcUIsZ0NBQVk7QUFGc0Q7QUFBMUUsYUFGSixFQU9JLGFBUEosQ0FSSixDQVBKLENBbEJHLEVBNENILGdCQUFNTixhQUFOLHlCQUVJO0FBQ0lJLDBCQUFVO0FBQ05DLDhCQUFVcEIsWUFESjtBQUVOcUIsZ0NBQVk7QUFGTjtBQURkLGFBRkosRUFRSSxnQkFBTU4sYUFBTixDQUNJUSxNQURKLEVBRUk7QUFDSUosMEJBQVU7QUFDTkMsOEJBQVVwQixZQURKO0FBRU5xQixnQ0FBWTtBQUZOO0FBRGQsYUFGSixFQVFJLGdCQUFNTixhQUFOLENBQ0lTLEdBREosRUFFSTtBQUNJTCwwQkFBVTtBQUNOQyw4QkFBVXBCLFlBREo7QUFFTnFCLGdDQUFZO0FBRk47QUFEZCxhQUZKLEVBUUksZ0JBQU1OLGFBQU4sQ0FDSVUsVUFESixFQUVJO0FBQ0lOLDBCQUFVO0FBQ05DLDhCQUFVcEIsWUFESjtBQUVOcUIsZ0NBQVk7QUFGTjtBQURkLGFBRkosRUFRSSxJQVJKLENBUkosRUFrQkksZ0JBQU1OLGFBQU4sQ0FDSVUsVUFESixFQUVJO0FBQ0lOLDBCQUFVO0FBQ05DLDhCQUFVcEIsWUFESjtBQUVOcUIsZ0NBQVk7QUFGTjtBQURkLGFBRkosRUFRSSxhQVJKLENBbEJKLEVBNEJJLGdCQUFNTixhQUFOLENBQ0lVLFVBREosRUFFSTtBQUNJTiwwQkFBVTtBQUNOQyw4QkFBVXBCLFlBREo7QUFFTnFCLGdDQUFZO0FBRk47QUFEZCxhQUZKLEVBUUksUUFSSixDQTVCSixFQXNDSSxnQkFBTU4sYUFBTixDQUNJVSxVQURKLEVBRUk7QUFDSU4sMEJBQVU7QUFDTkMsOEJBQVVwQixZQURKO0FBRU5xQixnQ0FBWTtBQUZOO0FBRGQsYUFGSixFQVFJLFdBUkosQ0F0Q0osRUFnREksZ0JBQU1OLGFBQU4sQ0FDSVUsVUFESixFQUVJO0FBQ0lOLDBCQUFVO0FBQ05DLDhCQUFVcEIsWUFESjtBQUVOcUIsZ0NBQVk7QUFGTjtBQURkLGFBRkosRUFRSSxnQkFSSixDQWhESixFQTBESSxnQkFBTU4sYUFBTixDQUNJVSxVQURKLEVBRUk7QUFDSU4sMEJBQVU7QUFDTkMsOEJBQVVwQixZQURKO0FBRU5xQixnQ0FBWTtBQUZOO0FBRGQsYUFGSixFQVFJLFNBUkosQ0ExREosRUFvRUksZ0JBQU1OLGFBQU4sQ0FDSVUsVUFESixFQUVJO0FBQ0lOLDBCQUFVO0FBQ05DLDhCQUFVcEIsWUFESjtBQUVOcUIsZ0NBQVk7QUFGTjtBQURkLGFBRkosRUFRSSxXQVJKLENBcEVKLENBUkosQ0FSSixFQWdHSSxnQkFBTU4sYUFBTixDQUNJVyxJQURKLEVBRUk7QUFDSVAsMEJBQVU7QUFDTkMsOEJBQVVwQixZQURKO0FBRU5xQixnQ0FBWTtBQUZOO0FBRGQsYUFGSixFQVFJLEtBQUtiLFVBQUwsRUFSSixDQWhHSixDQTVDRyxFQXVKSCxnQkFBTU8sYUFBTixDQUNJLEtBREosRUFFSTtBQUNJSSwwQkFBVTtBQUNOQyw4QkFBVXBCLFlBREo7QUFFTnFCLGdDQUFZO0FBRk47QUFEZCxhQUZKLEVBUUksUUFSSixFQVNJVyxTQUFTLEtBQUt0QixLQUFMLENBQVd1QixZQUFYLENBQXdCQyxJQUFqQyxFQUF1QyxFQUF2QyxFQUEyQ0MsUUFBM0MsQ0FBb0QsRUFBcEQsQ0FUSixFQVVJLFdBVkosQ0F2SkcsQ0FBUDtBQW9LSDtBQTVLRixLQW5Cd0IsQ0FBM0IsRUFnTUksQ0FBQztBQUNEN0IsYUFBSyxpQkFESjtBQUVEQyxlQUFPLFlBQVk7QUFDZixnQkFBSTZCLE9BQU8saUNBQW1CLGFBQWEsc0JBQW9CQyxJQUFwQixDQUF5QixTQUFTQyxPQUFULENBQWlCNUIsS0FBakIsRUFBd0I7QUFDeEYsb0JBQUlPLE9BQUosRUFBYXNCLFFBQWIsRUFBdUJOLFlBQXZCLEVBQXFDZixjQUFyQyxFQUFxRFAsUUFBckQ7QUFDQSx1QkFBTyxzQkFBb0I2QixJQUFwQixDQUF5QixTQUFTQyxRQUFULENBQWtCQyxRQUFsQixFQUE0QjtBQUN4RCwyQkFBTyxDQUFQLEVBQVU7QUFDTixnQ0FBUUEsU0FBU0MsSUFBVCxHQUFnQkQsU0FBU0UsSUFBakM7QUFDSSxpQ0FBSyxDQUFMO0FBQ0kzQiwwQ0FBVVAsTUFBTW1DLEtBQU4sQ0FBWTVCLE9BQXRCO0FBQ0FzQiwyQ0FBVyx3QkFBU3RCLE9BQVQsQ0FBWDtBQUNBeUIseUNBQVNFLElBQVQsR0FBZ0IsQ0FBaEI7QUFDQSx1Q0FBT0wsU0FBU08sT0FBVCxDQUFpQkMsZUFBakIsR0FBbUNDLElBQW5DLEVBQVA7O0FBRUosaUNBQUssQ0FBTDtBQUNJZiwrQ0FBZVMsU0FBU08sSUFBeEI7QUFDQVAseUNBQVNFLElBQVQsR0FBZ0IsQ0FBaEI7QUFDQSx1Q0FBT0wsU0FBU08sT0FBVCxDQUFpQjVCLGNBQWpCLEdBQWtDOEIsSUFBbEMsRUFBUDs7QUFFSixpQ0FBSyxDQUFMO0FBQ0k5QixpREFBaUJ3QixTQUFTTyxJQUExQjtBQUNBUCx5Q0FBU0UsSUFBVCxHQUFnQixFQUFoQjtBQUNBLHVDQUFPLGtCQUFTTSxHQUFULENBQWFDLE1BQU1uQixTQUFTQyxZQUFULENBQU4sRUFBOEJtQixJQUE5QixHQUFxQ3hDLEdBQXJDLENBQXlDLFVBQVV5QyxPQUFWLEVBQW1CdkMsS0FBbkIsRUFBMEI7QUFDbkYsMkNBQU95QixTQUFTTyxPQUFULENBQWlCbkMsUUFBakIsQ0FBMEJHLEtBQTFCLEVBQWlDa0MsSUFBakMsRUFBUDtBQUNILGlDQUZtQixDQUFiLENBQVA7O0FBSUosaUNBQUssRUFBTDtBQUNJckMsMkNBQVcrQixTQUFTTyxJQUFwQjtBQUNBLHVDQUFPUCxTQUFTWSxNQUFULENBQWdCLFFBQWhCLEVBQTBCLEVBQUVyQyxTQUFTQSxPQUFYLEVBQW9CTixVQUFVQSxRQUE5QixFQUF3Q3NCLGNBQWNBLFlBQXRELEVBQW9FZixnQkFBZ0JBLGNBQXBGLEVBQTFCLENBQVA7O0FBRUosaUNBQUssRUFBTDtBQUNBLGlDQUFLLEtBQUw7QUFDSSx1Q0FBT3dCLFNBQVNhLElBQVQsRUFBUDtBQXpCUjtBQTJCSDtBQUNKLGlCQTlCTSxFQThCSmpCLE9BOUJJLEVBOEJLLElBOUJMLENBQVA7QUErQkgsYUFqQzBDLENBQWhDLENBQVg7O0FBbUNBLHFCQUFTa0IsZUFBVCxDQUF5QkMsRUFBekIsRUFBNkI7QUFDekIsdUJBQU9yQixLQUFLaEMsS0FBTCxDQUFXLElBQVgsRUFBaUJDLFNBQWpCLENBQVA7QUFDSDs7QUFFRCxtQkFBT21ELGVBQVA7QUFDSCxTQXpDTTtBQUZOLEtBQUQsQ0FoTUo7O0FBOE9BLFdBQU92RCxZQUFQO0FBQ0gsQ0F4UGtCLGtCQUFuQjs7a0JBMFBlQSxZIiwiZmlsZSI6InVua25vd24ifQ==