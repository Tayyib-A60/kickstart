'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _web = require('../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _campaign = require('../ethereum/campaign');

var _campaign2 = _interopRequireDefault(_campaign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'C:\\Users\\User\\Downloads\\kickstart\\components\\RequestRow.js';


var RequestRow = function (_Component) {
    (0, _inherits3.default)(RequestRow, _Component);

    function RequestRow() {
        var _ref,
            _this2 = this;

        var _temp, _this, _ret;

        (0, _classCallCheck3.default)(this, RequestRow);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RequestRow.__proto__ || (0, _getPrototypeOf2.default)(RequestRow)).call.apply(_ref, [this].concat(args))), _this), _this.approveRequest = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
            var campaign, accounts;
            return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            campaign = (0, _campaign2.default)(_this.props.address);
                            _context.next = 3;
                            return _web2.default.eth.getAccounts();

                        case 3:
                            accounts = _context.sent;
                            _context.next = 6;
                            return campaign.methods.approveRequest(_this.props.id).send({
                                from: accounts[0]
                            });

                        case 6:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee, _this2);
        })), _this.finalizeRequest = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
            var campaign, accounts;
            return _regenerator2.default.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            campaign = (0, _campaign2.default)(_this.props.address);
                            _context2.next = 3;
                            return _web2.default.eth.getAccounts();

                        case 3:
                            accounts = _context2.sent;
                            _context2.next = 6;
                            return campaign.methods.finalizeRequest(_this.props.id).send({
                                from: accounts[0]
                            });

                        case 6:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, _this2);
        })), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
    }

    (0, _createClass3.default)(RequestRow, [{
        key: 'render',
        value: function render() {
            var Cell = _semanticUiReact.Table.Cell,
                Row = _semanticUiReact.Table.Row;
            var _props = this.props,
                id = _props.id,
                request = _props.request,
                approversCount = _props.approversCount;

            var noOfApprovers = parseInt(approversCount._hex, 16).toString(10);
            var readyToFinalize = request.approvalCount > noOfApprovers / 2;

            var amount = _web2.default.utils.fromWei(parseInt(request.amount._hex, 16).toString(10), 'ether');
            var approvalCount = parseInt(request.approvalCount._hex, 16).toString(10);
            return _react2.default.createElement(Row, { disabled: request.completed, positive: readyToFinalize && !request.completed, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 32
                }
            }, _react2.default.createElement(Cell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 33
                }
            }, id), _react2.default.createElement(Cell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 34
                }
            }, request.description), _react2.default.createElement(Cell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 35
                }
            }, amount), _react2.default.createElement(Cell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 36
                }
            }, request.recipient), _react2.default.createElement(Cell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 37
                }
            }, approvalCount, '/', noOfApprovers), _react2.default.createElement(Cell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 38
                }
            }, request.completed ? null : _react2.default.createElement(_semanticUiReact.Button, { color: 'green', basic: true, onClick: this.approveRequest, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 40
                }
            }, 'Approve')), _react2.default.createElement(Cell, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 43
                }
            }, request.completed ? null : _react2.default.createElement(_semanticUiReact.Button, { color: 'blue', basic: true, onClick: this.finalizeRequest, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 45
                }
            }, 'Finalize')));
        }
    }]);

    return RequestRow;
}(_react.Component);

exports.default = RequestRow;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiUmVxdWVzdFJvdyIsIl9Db21wb25lbnQiLCJfcmVmIiwiX3RoaXMyIiwiX3RlbXAiLCJfdGhpcyIsIl9yZXQiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJncyIsIkFycmF5IiwiX2tleSIsIl9fcHJvdG9fXyIsImNhbGwiLCJhcHBseSIsImNvbmNhdCIsImFwcHJvdmVSZXF1ZXN0IiwibWFyayIsIl9jYWxsZWUiLCJjYW1wYWlnbiIsImFjY291bnRzIiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsInByb3BzIiwiYWRkcmVzcyIsImV0aCIsImdldEFjY291bnRzIiwic2VudCIsIm1ldGhvZHMiLCJpZCIsInNlbmQiLCJmcm9tIiwic3RvcCIsImZpbmFsaXplUmVxdWVzdCIsIl9jYWxsZWUyIiwiX2NhbGxlZTIkIiwiX2NvbnRleHQyIiwia2V5IiwidmFsdWUiLCJyZW5kZXIiLCJDZWxsIiwiUm93IiwiX3Byb3BzIiwicmVxdWVzdCIsImFwcHJvdmVyc0NvdW50Iiwibm9PZkFwcHJvdmVycyIsInBhcnNlSW50IiwiX2hleCIsInRvU3RyaW5nIiwicmVhZHlUb0ZpbmFsaXplIiwiYXBwcm92YWxDb3VudCIsImFtb3VudCIsInV0aWxzIiwiZnJvbVdlaSIsImNyZWF0ZUVsZW1lbnQiLCJkaXNhYmxlZCIsImNvbXBsZXRlZCIsInBvc2l0aXZlIiwiX19zb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJkZXNjcmlwdGlvbiIsInJlY2lwaWVudCIsImNvbG9yIiwiYmFzaWMiLCJvbkNsaWNrIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBSkEsSUFBSUEsZUFBZSxrRUFBbkI7OztBQU1BLElBQUlD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