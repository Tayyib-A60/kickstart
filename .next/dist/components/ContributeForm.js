'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _campaign = require('../ethereum/campaign');

var _campaign2 = _interopRequireDefault(_campaign);

var _web = require('../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _routes = require('../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'C:\\Users\\User\\Desktop\\kickstart\\components\\ContributeForm.js';


var ContributeForm = function (_Component) {
    (0, _inherits3.default)(ContributeForm, _Component);

    function ContributeForm() {
        var _ref,
            _this2 = this;

        var _temp, _this, _ret;

        (0, _classCallCheck3.default)(this, ContributeForm);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = ContributeForm.__proto__ || (0, _getPrototypeOf2.default)(ContributeForm)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            myContribution: '',
            errorMessage: '',
            loading: false
        }, _this.contribute = function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(event) {
                var campaign, accounts;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                event.preventDefault();
                                campaign = (0, _campaign2.default)(_this.props.address);

                                _this.setState({ loading: true });
                                _this.setState({ errorMessage: '' });
                                _context.prev = 4;
                                _context.next = 7;
                                return _web2.default.eth.getAccounts();

                            case 7:
                                accounts = _context.sent;
                                _context.next = 10;
                                return campaign.methods.contribute().send({
                                    from: accounts[0],
                                    value: _web2.default.utils.toWei(_this.state.myContribution, 'ether')
                                });

                            case 10:
                                _routes.Router.replaceRoute('/campaigns/', _this.props.address);
                                _context.next = 16;
                                break;

                            case 13:
                                _context.prev = 13;
                                _context.t0 = _context['catch'](4);

                                _this.setState({ errorMessage: _context.t0.message });

                            case 16:
                                _this.setState({ loading: false, myContribution: '' });

                            case 17:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, _this2, [[4, 13]]);
            }));

            return function (_x) {
                return _ref2.apply(this, arguments);
            };
        }(), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
    }

    (0, _createClass3.default)(ContributeForm, [{
        key: 'render',
        value: function render() {
            var _this3 = this;

            return _react2.default.createElement('div', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 35
                }
            }, _react2.default.createElement(_semanticUiReact.Form, { onSubmit: this.contribute, error: !!this.state.errorMessage, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 36
                }
            }, _react2.default.createElement(_semanticUiReact.Form.Field, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 37
                }
            }, _react2.default.createElement('label', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 38
                }
            }, 'Amount to contribute'), _react2.default.createElement(_semanticUiReact.Input, {
                label: 'ether',
                labelPosition: 'right',
                value: this.state.myContribution,
                onChange: function onChange(event) {
                    return _this3.setState({ myContribution: event.target.value });
                },
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 39
                }
            })), _react2.default.createElement(_semanticUiReact.Message, { error: true, header: 'oops!!!', content: this.state.errorMessage, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 46
                }
            }), _react2.default.createElement(_semanticUiReact.Button, { primary: true, loading: this.state.loading, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 47
                }
            }, 'Contribute')));
        }
    }]);

    return ContributeForm;
}(_react.Component);

exports.default = ContributeForm;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQ29udHJpYnV0ZUZvcm0iLCJfQ29tcG9uZW50IiwiX3JlZiIsIl90aGlzMiIsIl90ZW1wIiwiX3RoaXMiLCJfcmV0IiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJfX3Byb3RvX18iLCJjYWxsIiwiYXBwbHkiLCJjb25jYXQiLCJzdGF0ZSIsIm15Q29udHJpYnV0aW9uIiwiZXJyb3JNZXNzYWdlIiwibG9hZGluZyIsImNvbnRyaWJ1dGUiLCJfcmVmMiIsIm1hcmsiLCJfY2FsbGVlIiwiZXZlbnQiLCJjYW1wYWlnbiIsImFjY291bnRzIiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsInByZXZlbnREZWZhdWx0IiwicHJvcHMiLCJhZGRyZXNzIiwic2V0U3RhdGUiLCJldGgiLCJnZXRBY2NvdW50cyIsInNlbnQiLCJtZXRob2RzIiwic2VuZCIsImZyb20iLCJ2YWx1ZSIsInV0aWxzIiwidG9XZWkiLCJyZXBsYWNlUm91dGUiLCJ0MCIsIm1lc3NhZ2UiLCJzdG9wIiwiX3giLCJrZXkiLCJyZW5kZXIiLCJfdGhpczMiLCJjcmVhdGVFbGVtZW50IiwiX19zb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJvblN1Ym1pdCIsImVycm9yIiwiRmllbGQiLCJsYWJlbCIsImxhYmVsUG9zaXRpb24iLCJvbkNoYW5nZSIsInRhcmdldCIsImhlYWRlciIsImNvbnRlbnQiLCJwcmltYXJ5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBTEEsSUFBSUEsZUFBZSxvRUFBbkI7OztBQU9BLElBQUlDLGlCQUFpQixVQUFVQyxVQUFWLEVBQXNCO0FBQ3ZDLDRCQUFVRCxjQUFWLEVBQTBCQyxVQUExQjs7QUFFQSxhQUFTRCxjQUFULEdBQTBCO0FBQ3RCLFlBQUlFLElBQUo7QUFBQSxZQUNJQyxTQUFTLElBRGI7O0FBR0EsWUFBSUMsS0FBSixFQUFXQyxLQUFYLEVBQWtCQyxJQUFsQjs7QUFFQSxzQ0FBZ0IsSUFBaEIsRUFBc0JOLGNBQXRCOztBQUVBLGFBQUssSUFBSU8sT0FBT0MsVUFBVUMsTUFBckIsRUFBNkJDLE9BQU9DLE1BQU1KLElBQU4sQ0FBcEMsRUFBaURLLE9BQU8sQ0FBN0QsRUFBZ0VBLE9BQU9MLElBQXZFLEVBQTZFSyxNQUE3RSxFQUFxRjtBQUNqRkYsaUJBQUtFLElBQUwsSUFBYUosVUFBVUksSUFBVixDQUFiO0FBQ0g7O0FBRUQsZUFBT04sUUFBUUYsU0FBU0MsUUFBUSx5Q0FBMkIsSUFBM0IsRUFBaUMsQ0FBQ0gsT0FBT0YsZUFBZWEsU0FBZixJQUE0Qiw4QkFBdUJiLGNBQXZCLENBQXBDLEVBQTRFYyxJQUE1RSxDQUFpRkMsS0FBakYsQ0FBdUZiLElBQXZGLEVBQTZGLENBQUMsSUFBRCxFQUFPYyxNQUFQLENBQWNOLElBQWQsQ0FBN0YsQ0FBakMsQ0FBUixFQUE2SkwsS0FBdEssR0FBOEtBLE1BQU1ZLEtBQU4sR0FBYztBQUN2TUMsNEJBQWdCLEVBRHVMO0FBRXZNQywwQkFBYyxFQUZ5TDtBQUd2TUMscUJBQVM7QUFIOEwsU0FBNUwsRUFJWmYsTUFBTWdCLFVBQU4sR0FBbUIsWUFBWTtBQUM5QixnQkFBSUMsUUFBUSxpQ0FBbUIsYUFBYSxzQkFBb0JDLElBQXBCLENBQXlCLFNBQVNDLE9BQVQsQ0FBaUJDLEtBQWpCLEVBQXdCO0FBQ3pGLG9CQUFJQyxRQUFKLEVBQWNDLFFBQWQ7QUFDQSx1QkFBTyxzQkFBb0JDLElBQXBCLENBQXlCLFNBQVNDLFFBQVQsQ0FBa0JDLFFBQWxCLEVBQTRCO0FBQ3hELDJCQUFPLENBQVAsRUFBVTtBQUNOLGdDQUFRQSxTQUFTQyxJQUFULEdBQWdCRCxTQUFTRSxJQUFqQztBQUNJLGlDQUFLLENBQUw7QUFDSVAsc0NBQU1RLGNBQU47QUFDQVAsMkNBQVcsd0JBQVNyQixNQUFNNkIsS0FBTixDQUFZQyxPQUFyQixDQUFYOztBQUVBOUIsc0NBQU0rQixRQUFOLENBQWUsRUFBRWhCLFNBQVMsSUFBWCxFQUFmO0FBQ0FmLHNDQUFNK0IsUUFBTixDQUFlLEVBQUVqQixjQUFjLEVBQWhCLEVBQWY7QUFDQVcseUNBQVNDLElBQVQsR0FBZ0IsQ0FBaEI7QUFDQUQseUNBQVNFLElBQVQsR0FBZ0IsQ0FBaEI7QUFDQSx1Q0FBTyxjQUFLSyxHQUFMLENBQVNDLFdBQVQsRUFBUDs7QUFFSixpQ0FBSyxDQUFMO0FBQ0lYLDJDQUFXRyxTQUFTUyxJQUFwQjtBQUNBVCx5Q0FBU0UsSUFBVCxHQUFnQixFQUFoQjtBQUNBLHVDQUFPTixTQUFTYyxPQUFULENBQWlCbkIsVUFBakIsR0FBOEJvQixJQUE5QixDQUFtQztBQUN0Q0MsMENBQU1mLFNBQVMsQ0FBVCxDQURnQztBQUV0Q2dCLDJDQUFPLGNBQUtDLEtBQUwsQ0FBV0MsS0FBWCxDQUFpQnhDLE1BQU1ZLEtBQU4sQ0FBWUMsY0FBN0IsRUFBNkMsT0FBN0M7QUFGK0IsaUNBQW5DLENBQVA7O0FBS0osaUNBQUssRUFBTDtBQUNJLCtDQUFPNEIsWUFBUCxDQUFvQixhQUFwQixFQUFtQ3pDLE1BQU02QixLQUFOLENBQVlDLE9BQS9DO0FBQ0FMLHlDQUFTRSxJQUFULEdBQWdCLEVBQWhCO0FBQ0E7O0FBRUosaUNBQUssRUFBTDtBQUNJRix5Q0FBU0MsSUFBVCxHQUFnQixFQUFoQjtBQUNBRCx5Q0FBU2lCLEVBQVQsR0FBY2pCLFNBQVMsT0FBVCxFQUFrQixDQUFsQixDQUFkOztBQUVBekIsc0NBQU0rQixRQUFOLENBQWUsRUFBRWpCLGNBQWNXLFNBQVNpQixFQUFULENBQVlDLE9BQTVCLEVBQWY7O0FBRUosaUNBQUssRUFBTDtBQUNJM0Msc0NBQU0rQixRQUFOLENBQWUsRUFBRWhCLFNBQVMsS0FBWCxFQUFrQkYsZ0JBQWdCLEVBQWxDLEVBQWY7O0FBRUosaUNBQUssRUFBTDtBQUNBLGlDQUFLLEtBQUw7QUFDSSx1Q0FBT1ksU0FBU21CLElBQVQsRUFBUDtBQW5DUjtBQXFDSDtBQUNKLGlCQXhDTSxFQXdDSnpCLE9BeENJLEVBd0NLckIsTUF4Q0wsRUF3Q2EsQ0FBQyxDQUFDLENBQUQsRUFBSSxFQUFKLENBQUQsQ0F4Q2IsQ0FBUDtBQXlDSCxhQTNDMkMsQ0FBaEMsQ0FBWjs7QUE2Q0EsbUJBQU8sVUFBVStDLEVBQVYsRUFBYztBQUNqQix1QkFBTzVCLE1BQU1QLEtBQU4sQ0FBWSxJQUFaLEVBQWtCUCxTQUFsQixDQUFQO0FBQ0gsYUFGRDtBQUdILFNBakRxQixFQUpQLEVBcURWSixLQXJERSxHQXFETSx5Q0FBMkJDLEtBQTNCLEVBQWtDQyxJQUFsQyxDQXJEYjtBQXNESDs7QUFFRCwrQkFBYU4sY0FBYixFQUE2QixDQUFDO0FBQzFCbUQsYUFBSyxRQURxQjtBQUUxQlIsZUFBTyxTQUFTUyxNQUFULEdBQWtCO0FBQ3JCLGdCQUFJQyxTQUFTLElBQWI7O0FBRUEsbUJBQU8sZ0JBQU1DLGFBQU4sQ0FDSCxLQURHLEVBRUg7QUFDSUMsMEJBQVU7QUFDTkMsOEJBQVV6RCxZQURKO0FBRU4wRCxnQ0FBWTtBQUZOO0FBRGQsYUFGRyxFQVFILGdCQUFNSCxhQUFOLHdCQUVJLEVBQUVJLFVBQVUsS0FBS3JDLFVBQWpCLEVBQTZCc0MsT0FBTyxDQUFDLENBQUMsS0FBSzFDLEtBQUwsQ0FBV0UsWUFBakQsRUFBK0RvQyxVQUFVO0FBQ2pFQyw4QkFBVXpELFlBRHVEO0FBRWpFMEQsZ0NBQVk7QUFGcUQ7QUFBekUsYUFGSixFQU9JLGdCQUFNSCxhQUFOLENBQ0ksc0JBQUtNLEtBRFQsRUFFSTtBQUNJTCwwQkFBVTtBQUNOQyw4QkFBVXpELFlBREo7QUFFTjBELGdDQUFZO0FBRk47QUFEZCxhQUZKLEVBUUksZ0JBQU1ILGFBQU4sQ0FDSSxPQURKLEVBRUk7QUFDSUMsMEJBQVU7QUFDTkMsOEJBQVV6RCxZQURKO0FBRU4wRCxnQ0FBWTtBQUZOO0FBRGQsYUFGSixFQVFJLHNCQVJKLENBUkosRUFrQkksZ0JBQU1ILGFBQU4seUJBQTJCO0FBQ3ZCTyx1QkFBTyxPQURnQjtBQUV2QkMsK0JBQWUsT0FGUTtBQUd2Qm5CLHVCQUFPLEtBQUsxQixLQUFMLENBQVdDLGNBSEs7QUFJdkI2QywwQkFBVSxTQUFTQSxRQUFULENBQWtCdEMsS0FBbEIsRUFBeUI7QUFDL0IsMkJBQU80QixPQUFPakIsUUFBUCxDQUFnQixFQUFFbEIsZ0JBQWdCTyxNQUFNdUMsTUFBTixDQUFhckIsS0FBL0IsRUFBaEIsQ0FBUDtBQUNILGlCQU5zQjtBQU92QlksMEJBQVU7QUFDTkMsOEJBQVV6RCxZQURKO0FBRU4wRCxnQ0FBWTtBQUZOO0FBUGEsYUFBM0IsQ0FsQkosQ0FQSixFQXNDSSxnQkFBTUgsYUFBTiwyQkFBNkIsRUFBRUssT0FBTyxJQUFULEVBQWVNLFFBQVEsU0FBdkIsRUFBa0NDLFNBQVMsS0FBS2pELEtBQUwsQ0FBV0UsWUFBdEQsRUFBb0VvQyxVQUFVO0FBQ25HQyw4QkFBVXpELFlBRHlGO0FBRW5HMEQsZ0NBQVk7QUFGdUY7QUFBOUUsYUFBN0IsQ0F0Q0osRUEyQ0ksZ0JBQU1ILGFBQU4sMEJBRUksRUFBRWEsU0FBUyxJQUFYLEVBQWlCL0MsU0FBUyxLQUFLSCxLQUFMLENBQVdHLE9BQXJDLEVBQThDbUMsVUFBVTtBQUNoREMsOEJBQVV6RCxZQURzQztBQUVoRDBELGdDQUFZO0FBRm9DO0FBQXhELGFBRkosRUFPSSxZQVBKLENBM0NKLENBUkcsQ0FBUDtBQThESDtBQW5FeUIsS0FBRCxDQUE3Qjs7QUFzRUEsV0FBT3pELGNBQVA7QUFDSCxDQTlJb0Isa0JBQXJCOztrQkFnSmVBLGMiLCJmaWxlIjoidW5rbm93biJ9